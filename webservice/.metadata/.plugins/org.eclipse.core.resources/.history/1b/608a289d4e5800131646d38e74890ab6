package webservice.database;

import java.sql.Connection; 
import java.sql.Date; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException; 
import java.sql.Statement; 
import java.util.ArrayList;

import webservice.representations.Collection;
import webservice.representations.Comment;
import webservice.representations.Post;
import webservice.representations.User;

public class DB_Connector { 
     
    private static final DB_Connector dbcon = new DB_Connector(); 
    private static Connection connection; 
    private static final String DB_PATH = "SOAPP.db"; 

    static { 
        try { 
            Class.forName("org.sqlite.JDBC"); 
        } catch (ClassNotFoundException e) { 
            System.err.println("Fehler beim Laden des JDBC-Treibers"); 
            e.printStackTrace(); 
        } 
    } 
     
    private DB_Connector(){ 
    } 
     
    public static DB_Connector getInstance(){ 
        return dbcon; 
    } 
     
    private void initDBConnection() { 
        try { 
            if (connection != null) 
                return; 
            System.out.println("Creating Connection to Database..."); 
            connection = DriverManager.getConnection("jdbc:sqlite:" + DB_PATH); 
            if (!connection.isClosed()) 
                System.out.println("...Connection established"); 
        } catch (SQLException e) { 
            throw new RuntimeException(e); 
        } 

        Runtime.getRuntime().addShutdownHook(new Thread() { 
            public void run() { 
                try { 
                    if (!connection.isClosed() && connection != null) { 
                        connection.close(); 
                        if (connection.isClosed()) 
                            System.out.println("Connection to Database closed"); 
                    } 
                } catch (SQLException e) { 
                    e.printStackTrace(); 
                } 
            } 
        }); 
    } 
    public void createTableUser(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS User("
					+ "ID INT PRIMARY KEY AUTOINCREMENT"
					+ "username CHAR(25)"
					+ "password CHAR(25)"
					+ "email CHAR;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    }
    public void createTablePost(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Post("
					+ "ID INT PRIMARY KEY AUTOINCREMENT"
					+ "title CHAR"
					+ "authorID INT"
					+ "subtitle CHAR"
					+ "body TEXT"
					+ "image CHAR"
					+ "creationDate NONE"
					+ "collectionID INT"
					+ "isDraft INT"
					+ "views INT;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    	
    }
    public void createTableComment(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Comment("
					+ "ID INT PRIMARY KEY AUTOINCREMENT"
					+ "authorID INT"
					+ "postID INT"
					+ "body TEXT"
					+ "creationDate NONE;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    	
    }
    public void createTableCollection(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Comment("
					+ "ID INT PRIMARY KEY AUTOINCREMENT"
					+ "title CHAR"
					+ "image CHAR"
					+ "views INT"
					+ "posts INT;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    	
    }
    public ArrayList<User> getUsers(){
    	
    }
    public User getSingleUser(int ID){
    	
    }
    public ArrayList<Post> getPosts(){
    	
    }
    public Post getSinglePost(int ID){
    	
    }
    public ArrayList<Comment> getComments(){
    	
    }
    public Comment getSingleComment(int ID){
    	
    }
    public ArrayList<Collection> getCollections(){
    	
    }
    public Collection getSingleCollection(int ID){
    	
    }
    

    public static void main(String[] args) { 
        DB_Connector dbc = DB_Connector.getInstance(); 
        dbc.initDBConnection(); 
        dbc.handleDB(); 
    } 
}