package webservice.database;

import java.sql.Connection; 
import java.sql.Date; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException; 
import java.sql.Statement; 
import java.util.ArrayList;

import webservice.representations.Collection;
import webservice.representations.Comment;
import webservice.representations.Post;
import webservice.representations.User;

public class DB_Connector { 
     
    private static final DB_Connector dbcon = new DB_Connector(); 
    private static Connection connection; 
    private static final String DB_PATH = "SOAPP.db"; 

    static { 
        try { 
            Class.forName("org.sqlite.JDBC"); 
        } catch (ClassNotFoundException e) { 
            System.err.println("Fehler beim Laden des JDBC-Treibers"); 
            e.printStackTrace(); 
        } 
    } 
     
    private DB_Connector(){ 
    	
    	createTableUser();
    	createTablePost();
    	createTableComment();
    	createTableCollection();
    	initDBConnection();
    } 
     
    public static DB_Connector getInstance(){ 
        return dbcon; 
    } 
     
    private void initDBConnection() { 
        try { 
            if (connection != null) 
                return; 
            System.out.println("Creating Connection to Database..."); 
            connection = DriverManager.getConnection("jdbc:sqlite:" + DB_PATH); 
            if (!connection.isClosed()) 
                System.out.println("...Connection established"); 
        } catch (SQLException e) { 
            throw new RuntimeException(e); 
        } 

        Runtime.getRuntime().addShutdownHook(new Thread() { 
            public void run() { 
                try { 
                    if (!connection.isClosed() && connection != null) { 
                        connection.close(); 
                        if (connection.isClosed()) 
                            System.out.println("Connection to Database closed"); 
                    } 
                } catch (SQLException e) { 
                    e.printStackTrace(); 
                } 
            } 
        }); 
    } 
    
    public void createTableUser(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS User("
					+ "id INT PRIMARY KEY AUTOINCREMENT"
					+ "username CHAR(25)"
					+ "password CHAR(25)"
					+ "email CHAR;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    }
    public void createTablePost(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Post("
					+ "id INT PRIMARY KEY AUTOINCREMENT"
					+ "title CHAR"
					+ "authorID INT"
					+ "subtitle CHAR"
					+ "body TEXT"
					+ "image CHAR"
					+ "creationDate NONE"
					+ "collectionID INT"
					+ "isDraft INT"
					+ "views INT;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    	
    }
    public void createTableComment(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Comment("
					+ "id INT PRIMARY KEY AUTOINCREMENT"
					+ "authorID INT"
					+ "postID INT"
					+ "body TEXT"
					+ "creationDate NONE;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    	
    }
    public void createTableCollection(){
    	try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Comment("
					+ "id INT PRIMARY KEY AUTOINCREMENT"
					+ "title CHAR"
					+ "image CHAR"
					+ "views INT"
					+ "posts INT;");
		} catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query"); 
            e.printStackTrace(); 
		}
    	
    }
    public ArrayList<User> getUsers(){
    	ArrayList<User> UsersInDB = new ArrayList<User>();
    	Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery( "SELECT * FROM USER;" );
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String  uname = rs.getString("username");
        	String email  = rs.getString("email");
        	User user = new User(id,uname,email);
        	UsersInDB.add(user);
        	
        }
        rs.close();
        stmt.close();
        return UsersInDB;
    	
    }
    public ArrayList<User> getUsersByName(String name){
    	
    	ArrayList<User> UsersInDB = new ArrayList<User>();
    	PreparedStatement stmt;
    	stmt= connection.prepareStatement( "SELECT * FROM USER WHERE username=?;");
    	stmt.setString(1, name);
        ResultSet rs = stmt.executeQuery();
        
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String  uname = rs.getString("username");
        	String email  = rs.getString("email");
        	User user = new User(id,uname,email);
        	UsersInDB.add(user);
        	
        }
        rs.close();
        stmt.close();
        
        return UsersInDB;
    	
    }
    public User getSingleUser(int ID){
    	
    	int counter =0; 
    	User user;
    	PreparedStatement stmt;
    	stmt= connection.prepareStatement( "SELECT * FROM USER WHERE id=?;");
    	stmt.setInt(1, ID);
        ResultSet rs = stmt.executeQuery();
             
        while ( rs.next() ) {
        	
        
        	int id = rs.getInt("id");
        	String  uname = rs.getString("username");
        	String email  = rs.getString("email");
        	user = new User(id,uname,email);
        	counter=counter+1;
        }	
                
        stmt.close();
        if(counter > 1){
        	System.err.println("Couldn't handle DB-Query");
        	return null;
        }
        else{
        	return user;
        }
        
    	
    }
    public void createUser(data){
    	
    }
    public void changeUser(data){
    	
    }
    public ArrayList<Post> getPosts(){
    	ArrayList<Post> PostsInDB = new ArrayList<Post>();
    	Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery( "SELECT * FROM POST;" );
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String title  = rs.getString("title");
        	int authID = rs.getInt("authorID");
        	String subtitle = rs.getString("subtitle");
        	String body = rs.getString("body");
        	String image = rs.getString("image");
        	Date creationDate = rs.getDate("creationDate");
        	int collectionID = rs.getInt("collectionID");
        	boolean isDraft = rs.getBoolean("isDraft");
        	int views = rs.getInt("views");
        	Post post = new Post(id, title, authID, subtitle, body, image, creationDate, collectionID, isDraft, views);
        	PostsInDB.add(post);
        	
        }

        rs.close();
        stmt.close();
        return PostsInDB;
    	
    }
    public ArrayList<Post> getPostsByCollection(int collID){
    	ArrayList<Post> PostsInDB = new ArrayList<Post>();
    	PreparedStatement stmt;
    	stmt= connection.prepareStatement( "SELECT * FROM POST WHERE collectionID=?;");
    	stmt.setInt(1, collID);
        ResultSet rs = stmt.executeQuery();
        
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String title  = rs.getString("title");
        	int authID = rs.getInt("authorID");
        	String subtitle = rs.getString("subtitle");
        	String body = rs.getString("body");
        	String image = rs.getString("image");
        	Date creationDate = rs.getDate("creationDate");
        	int collectionID = rs.getInt("collectionID");
        	boolean isDraft = rs.getBoolean("isDraft");
        	int views = rs.getInt("views");
        	Post post = new Post(id, title, authID, subtitle, body, image, creationDate, collectionID, isDraft, views);
        	PostsInDB.add(post);
        	
        }
        rs.close();
        stmt.close();
        
        return PostsInDB;
    	
    }
    public ArrayList<Post> getPostsByUser(int userID){
    	ArrayList<Post> PostsInDB = new ArrayList<Post>();
    	PreparedStatement stmt;
    	stmt= connection.prepareStatement( "SELECT * FROM POST WHERE authorID=?;");
    	stmt.setInt(1, userID);
        ResultSet rs = stmt.executeQuery();
        
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String title  = rs.getString("title");
        	int authID = rs.getInt("authorID");
        	String subtitle = rs.getString("subtitle");
        	String body = rs.getString("body");
        	String image = rs.getString("image");
        	Date creationDate = rs.getDate("creationDate");
        	int collectionID = rs.getInt("collectionID");
        	boolean isDraft = rs.getBoolean("isDraft");
        	int views = rs.getInt("views");
        	Post post = new Post(id, title, authID, subtitle, body, image, creationDate, collectionID, isDraft, views);
        	PostsInDB.add(post);
        	
        }
        rs.close();
        stmt.close();
        
        return PostsInDB;
    	
    }
    public Post getSinglePost(int ID){
    	Post post;
    	int counter=0;
    	PreparedStatement stmt;
    	stmt= connection.prepareStatement( "SELECT * FROM POST WHERE id=?;");
    	stmt.setInt(1, ID);
        ResultSet rs = stmt.executeQuery();
        
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String title  = rs.getString("title");
        	int authID = rs.getInt("authorID");
        	String subtitle = rs.getString("subtitle");
        	String body = rs.getString("body");
        	String image = rs.getString("image");
        	Date creationDate = rs.getDate("creationDate");
        	int collectionID = rs.getInt("collectionID");
        	boolean isDraft = rs.getBoolean("isDraft");
        	int views = rs.getInt("views");
        	post = new Post(id, title, authID, subtitle, body, image, creationDate, collectionID, isDraft, views);
        	counter=counter+1;
        	
        }
        rs.close();
        stmt.close();
        
        if(counter > 1){
        	System.err.println("Couldn't handle DB-Query");
        	return null;
        }
        else{
        	return post;
        }
    	
    }
    public void createPost(data){
    	
    }
    public void changePost(data){
    	
    }

    public ArrayList<Comment> getCommentsByPost(int post_ID){
    	ArrayList<Comment> CommentsInDB = new ArrayList<Comment>();
    	PreparedStatement stmt;
    	stmt= connection.prepareStatement( "SELECT * FROM POST WHERE postID=?;");
    	stmt.setInt(1, post_ID);
        ResultSet rs = stmt.executeQuery();
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	int authID = rs.getInt("authorID");
        	int postID = rs.getInt("postID");        	
        	String body = rs.getString("body");
        	Date creationDate = rs.getDate("creationDate");
        	Comment comment = new Comment(id, authID, postID, body, creationDate);
        	CommentsInDB.add(comment);
        	
        }

        rs.close();
        stmt.close();
        return CommentsInDB;
    	
    }
    public void createComment(int postID){
    	
    }
    public ArrayList<Collection> getCollections(){
    	ArrayList<Collection> CollectionsInDB = new ArrayList<Collection>();
    	Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery( "SELECT * FROM COLLECTION;" );
        
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String title  = rs.getString("title");
        	String image = rs.getString("image");
        	int views = rs.getInt("views");
        	int posts = rs.getInt("posts");
        	Collection collection = new Collection(id, title, image, views, posts);
        	CollectionsInDB.add(collection);
        	
        }
        rs.close();
        stmt.close();
        return CollectionsInDB;
    	
    }
    public ArrayList<Collection> getCollectionsByName(String name){
    	ArrayList<Collection> CollectionsInDB = new ArrayList<Collection>();
    	PreparedStatement stmt;
    	stmt= connection.prepareStatement( "SELECT * FROM POST WHERE title=?;");
    	stmt.setString(1, name);
    	ResultSet rs = stmt.executeQuery();
    	
        while ( rs.next() ) {

        	int id = rs.getInt("id");
        	String title  = rs.getString("title");
        	String image = rs.getString("image");
        	int views = rs.getInt("views");
        	int posts = rs.getInt("posts");
        	Collection collection = new Collection(id, title, image, views, posts);
        	CollectionsInDB.add(collection);
        	
        }
        rs.close();
        stmt.close();
        return CollectionsInDB;
    	
    }
    public Collection getSingleCollection(int ID){
    	
    }
    public void createCollection(data){
    	
    }
    public void changeCollection(data){
    	
    }
    
}