package webservice.security;

import com.sun.jersey.api.core.HttpContext;
import com.sun.jersey.api.core.HttpRequestContext;
import com.sun.jersey.oauth.server.OAuthServerRequest;
import com.sun.jersey.oauth.signature.OAuthParameters;
import com.sun.jersey.oauth.signature.OAuthSecrets;
import com.sun.jersey.oauth.signature.OAuthSignature;
import com.sun.jersey.oauth.signature.OAuthSignatureException;


import javax.annotation.Resource;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import java.util.List;
import java.util.Set;

public class AuthRequestFilter {
	public static class PostSubmitParams {
        public PostSubmitParams(String id, String password) {
            this.id = id;
            this.password = password;
        }


        public String id;

        public String password;
    }

    static void verifyOAuth(HttpRequestContext context) throws OAuthSignatureException {

        try {
            OAuthServerRequest oauthReq = new OAuthServerRequest(context);

            for (String key : context.getFormParameters().keySet()) {
                List<String> value = context.getFormParameters().get(key);
                System.out.println(key + " -> " + value);
            }
            for (String key : oauthReq.getParameterNames()) {
                List<String> value = oauthReq.getHeaderValues(key);
                System.out.println(key + " -> " + value);
            }

            OAuthParameters params = new OAuthParameters();
            params.readRequest(oauthReq);
            OAuthSecrets secrets = new OAuthSecrets().consumerSecret("CONSUMER_SECRET").tokenSecret("TOKEN_SECRET");
            boolean isValid = OAuthSignature.verify(oauthReq, params, secrets);
            if (!isValid) {
                throw new WebApplicationException(401);
            }
        } catch (OAuthSignatureException e) {
            throw new WebApplicationException(401);
        }
    }

    static void verify2LeggedOAuth(HttpRequestContext context) throws OAuthSignatureException {

        try {
            OAuthServerRequest oauthReq = new OAuthServerRequest(context);
            OAuthParameters params = new OAuthParameters();
            params.readRequest(oauthReq);
            OAuthSecrets secrets = new OAuthSecrets().consumerSecret("CONSUMER_SECRET");
            boolean isValid = OAuthSignature.verify(oauthReq, params, secrets);
            if (!isValid) {
                throw new WebApplicationException(401);
            }
        } catch (OAuthSignatureException e) {

            throw new WebApplicationException(401);
        }
    }
}
